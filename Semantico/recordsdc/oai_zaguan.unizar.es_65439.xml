<?xml version="1.0" encoding="UTF-8"?><oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
  <dc:creator>Tolón Martín, Carlos Javier</dc:creator>
  <dc:creator>Medel Gracia, Victor</dc:creator>
  <dc:title>Evaluación de la degradación de prestaciones en escenarios multi-aplicación en Kubernetes</dc:title>
  <dc:identifier>http://zaguan.unizar.es/record/65439</dc:identifier>
  <dc:publisher>Universidad de Zaragoza</dc:publisher>
  <dc:date>2017</dc:date>
  <dc:description>Este proyecto se desarrolla en el ámbito de las aplicaciones distribuidas en sistemas de contenedores. Los objetivos parten de la hipótesis de que la compartición de recursos por distintos contenedores provoca la degradación de prestaciones. Para demostrar esta hipótesis se han realizado dos conjuntos de experimentos. El primero con aplicaciones que realizan un uso intensivo de un recurso, como CPU o disco. En cambio, en el segundo se utilizan aplicaciones industriales de procesado de data streaming de MapReduce y Web graph (WordCount y PageRank respectivamente). Ambos conjuntos de experimentos han puesto de manifiesto la existencia de degradación de prestaciones en las diferentes configuraciones. Esta degradación puede llegar a ser del 300 %. Probada la existencia de la degradación, se ha planteado e implementado una solución que consiste en un scheduler de cliente. El usuario realiza una caracterización de su aplicación indicando el recurso que más requiere y su nivel de uso. De esta forma, el scheduler decide el nodo destino. Para decidir la máquina sobre la que se despliega, se balancea al máximo el número de aplicaciones por nodo y se minimiza la penalización de unir varias aplicaciones que realicen uso de un mismo recurso. Con esta solución se acerca el proceso de scheduling de aplicaciones al usuario y se obtiene una mejora de rendimiento. Se ha probado que los mecanismos de aislamiento de recursos que proporciona Ku- bernetes (etiquetas limits y request) resultan insuficientes para mejorar las prestaciones de las aplicaciones. El scheduler propuesto como solución ha sido validado y comparado con el scheduler por defecto de Kubernetes mostrando una mejoría del 20 % en el caso medio del scheduler por defecto y llegando a mejorar en un 32 % el peor caso del mismo. Finalmente, se ha documentado el proceso de instalación de Kubernetes y se ha explicado la operativa y puesta en marcha de dos frameworks de procesado de data streaming sobre Kubernetes, como son Flink y Thrill, que han sido utilizados para la demostración de la hipótesis planteada.</dc:description>
  <dc:format>pdf</dc:format>
  <dc:language>spa</dc:language>
  <dc:type>info:eu-repo/semantics/bachelorThesis</dc:type>
  <dc:rights>by-nc-sa</dc:rights>
  <dc:rights>http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:rights>
</oai_dc:dc>